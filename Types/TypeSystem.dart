// dart_type_system.dart
// -----------------------------------------------------------
// üìò DART TYPE SYSTEM DEMO WITH EXPLANATIONS
// -----------------------------------------------------------
// This file shows how Dart ensures type safety using static
// (compile-time) and runtime checks. It also covers type inference,
// overriding, covariance, and sound typing principles.

// 1Ô∏è‚É£ SOUNDNESS ‚Äî Ensures variable values always match their declared types.
// -----------------------------------------------------------

void printInts(List<int> numbers) => print(numbers);

void soundnessExample() {
  // ‚ùå Unsound: No type argument, inferred as List<dynamic>
  final list = [];
  list.add(1);
  list.add('2'); // runtime risk

  // printInts(list); // ‚ùå Error: List<dynamic> can't be List<int>

  // ‚úÖ Fixed by adding <int>
  final typedList = <int>[];
  typedList.add(1);
  typedList.add(2); // only ints allowed
  printInts(typedList); // ‚úÖ Works
}

// 2Ô∏è‚É£ RUNTIME CHECKS ‚Äî Catches invalid casts at runtime.
// -----------------------------------------------------------

class Animal {}

class Dog extends Animal {}

class Cat extends Animal {}

void runtimeCheckExample() {
  List<Animal> animals = <Dog>[Dog()];
  // ‚ùå Runtime failure: List<Dog> is not List<Cat>
  try {
    List<Cat> cats = animals as List<Cat>; // runtime TypeError
    print(cats);
  } catch (e) {
    print('Runtime check caught: $e');
  }
}

// 3Ô∏è‚É£ IMPLICIT DOWNCAST FROM DYNAMIC
// -----------------------------------------------------------

int assumeString(dynamic obj) {
  // Dart checks at runtime if obj is a String
  String str = obj;
  return str.length;
}

void downcastExample() {
  print(assumeString("Hello")); // ‚úÖ Works
  try {
    print(assumeString(123)); // ‚ùå Throws TypeError
  } catch (e) {
    print('Runtime downcast error: $e');
  }
}

// 4Ô∏è‚É£ TYPE INFERENCE ‚Äî Dart infers types automatically.
// -----------------------------------------------------------

void inferenceExample() {
  var arguments = {'name': 'Xyrel', 'age': 18};
  // inferred as Map<String, Object>

  print(arguments);

  // Local variable inference:
  var x = 3; // inferred as int
  // x = 3.5; // ‚ùå Error: type 'double' not assignable to 'int'

  num y = 3; // ‚úÖ num allows int and double
  y = 4.5;
  print(y);
}

// 5Ô∏è‚É£ GENERICS AND TYPE SAFETY
// -----------------------------------------------------------

void genericExample() {
  // Dynamic list ‚Äî allows any type, but unsafe.
  List<dynamic> anything = [1, 'two', true];

  // ‚úÖ Safer: Typed list
  List<int> ints = [1, 2, 3];
  print(ints);

  // ‚ùå Unsafe cast example
  try {
    List<Cat> cats = <dynamic>[Dog()] as List<Cat>;
    print(cats);
  } catch (e) {
    print('Generic type error: $e');
  }
}

// 6Ô∏è‚É£ METHOD OVERRIDING ‚Äî SOUND PARAMETER AND RETURN TYPES
// -----------------------------------------------------------

class BaseAnimal {
  void chase(Animal a) => print("BaseAnimal chasing Animal");
  Animal get parent => Animal();
}

class HoneyBadger extends BaseAnimal {
  // ‚úÖ Return type can be a subtype
  @override
  HoneyBadger get parent => HoneyBadger();

  // ‚úÖ Parameter can be a supertype
  @override
  void chase(Object a) => print("HoneyBadger can chase anything!");
}

class CatHunter extends BaseAnimal {
  // ‚ùå Invalid: parameter is subtype (too strict)
  // @override
  // void chase(Cat c) => print("CatHunter chasing a Cat!");
  // Fix: use covariant if needed
  @override
  void chase(covariant Cat c) => print("CatHunter chasing specific cat!");
}

void overridingExample() {
  var badger = HoneyBadger();
  badger.chase("Mouse");
  print(badger.parent);

  var catHunter = CatHunter();
  catHunter.chase(Cat());
}

// 7Ô∏è‚É£ TYPE SUBSTITUTION ‚Äî PRODUCERS vs CONSUMERS
// -----------------------------------------------------------

class MaineCoon extends Cat {}

void substitutionExample() {
  // PRODUCER: You can replace with subtype
  Cat cat = MaineCoon(); // ‚úÖ Safe

  // CONSUMER: You can replace with supertype
  Animal a = Cat(); // ‚úÖ Safe

  // ‚ùå Invalid substitution
  // MaineCoon m = Cat(); // Not every Cat is a MaineCoon
  // static error

  // GENERIC VERSION
  List<MaineCoon> maineCoons = [];
  List<Cat> cats = maineCoons; // ‚úÖ List<MaineCoon> <: List<Cat>
  print(cats);

  // ‚ùå Opposite not allowed
  // List<Animal> animals = [];
  // List<Cat> bad = animals; // static analysis error
}

// 8Ô∏è‚É£ TYPE INFERENCE USING BOUNDS
// -----------------------------------------------------------

class A<X extends A<X>> {}

class B extends A<B> {}

class C extends B {}

void f<X extends A<X>>(X x) {}

void boundsExample() {
  f(B()); // ‚úÖ OK
  f(C()); // ‚úÖ OK because of inference using bounds
}

// 9Ô∏è‚É£ COVARIANT PARAMETERS
// -----------------------------------------------------------

class Mouse extends Animal {}

class Cat2 extends Animal {
  @override
  void chase(covariant Mouse m) {
    print("Cat is chasing a mouse");
  }
}

void covariantExample() {
  var c = Cat2();
  c.chase(Mouse()); // ‚úÖ Works
  try {
    c.chase(Animal()); // ‚ùå runtime TypeError
  } catch (e) {
    print('Covariant runtime check: $e');
  }
}

// üß© MAIN EXECUTION ‚Äî Run all examples sequentially
// -----------------------------------------------------------

void main() {
  print("1Ô∏è‚É£ SOUNDNESS:");
  soundnessExample();

  print("\n2Ô∏è‚É£ RUNTIME CHECKS:");
  runtimeCheckExample();

  print("\n3Ô∏è‚É£ IMPLICIT DOWNCAST:");
  downcastExample();

  print("\n4Ô∏è‚É£ TYPE INFERENCE:");
  inferenceExample();

  print("\n5Ô∏è‚É£ GENERICS:");
  genericExample();

  print("\n6Ô∏è‚É£ METHOD OVERRIDING:");
  overridingExample();

  print("\n7Ô∏è‚É£ TYPE SUBSTITUTION:");
  substitutionExample();

  print("\n8Ô∏è‚É£ INFERENCE USING BOUNDS:");
  boundsExample();

  print("\n9Ô∏è‚É£ COVARIANT PARAMETERS:");
  covariantExample();
}
